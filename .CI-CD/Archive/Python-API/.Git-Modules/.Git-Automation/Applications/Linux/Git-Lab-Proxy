#!/usr/bin/env bash

# -*-  Coding: UTF-8  -*- #
# -*-  System: Linux  -*- #
# -*-  Usage:    *    -*- #

set -e

if [ -n "$1" ]; then
    echo "Domain: $1"
else
    echo "Domain Name Argument Required"
    exit -1
fi

if [ -n "$2" ]; then
    echo "Username: $2"
else
    echo "Dynamic DNS Username Argument Required"
    exit -1
fi

if [ -n "$3" ]; then
    echo "Domain: $3"
else
    echo "Dynamic DNS Password Argument Required"
    exit -1
fi

print () {
    local input="$1"

    echo ""
    echo "${input}"
    echo ""

    sleep 2.0
}

echo ""
echo " ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ "
echo " ┃                         Automation                      ┃ "
echo " ┃                      ----------------                   ┃ "
echo " ┃   The following source file(s) contains confidential,   ┃ "
echo " ┃  proprietary information. Unauthorized use is strictly  ┃ "
echo " ┃    prohibited. No portions may be copied, reproduced,   ┃ "
echo " ┃      or incorporated outside of this domain without     ┃ "
echo " ┃         Cloud Hybrid LLC's prior written consent.       ┃ "
echo " ┃                                                         ┃ "
echo " ┃            Copyright (C) 2020, Cloud Hybrid.            ┃ "
echo " ┃                   All rights reserved.                  ┃ "
echo " ┃                                                         ┃ "
echo " ┃   ┌───────────┬─────────────────────────────────────┐   ┃ "
echo " ┃   │  License  │          (Private-Use Only)         │   ┃ "
echo " ┃   ├───────────┼─────────────────────────────────────┤   ┃ "
echo " ┃   │  Creator  │           Jacob B. Sanders          │   ┃ "
echo " ┃   ├───────────┼─────────────────────────────────────┤   ┃ "
echo " ┃   │   Email   │    jacob.sanders@cloudhybrid.io     │   ┃ "
echo " ┃   └───────────┴─────────────────────────────────────┘   ┃ "
echo " ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ "
echo ""

print "Ensuring DDClient Installation"

PKG="ddclient"
STATUS=$(dpkg-query -W --showformat='${Status}\n' $PKG | grep "install ok installed")
if [ "" = "$STATUS" ]; then
    print "Installing DDClient"
    set +e
    sudo DEBIAN_FRONTEND=noninteractive apt install ddclient --assume-yes --ignore-hold
    set -e
fi

print "Setting Dynamic IP Variables"

sudo cp /etc/ddclient.conf /etc/ddclient.backup

sudo bash -c cat << EOF >> /etc/ddclient.conf
protocol=dyndns2
use=web
server=domains.google.com
ssl=yes
login=$2
password='$3'
$1

EOF

sudo add-apt-repository ppa:certbot/certbot --enable-source --yes

PKG="certbot"
STATUS=$(dpkg-query -W --showformat='${Status}\n' $PKG | grep "install ok installed")
if [ "" = "$STATUS" ]; then
    print "Installing certbot"
    sudo apt install certbot \
        --show-progress \
        --show-upgraded \
        --install-recommends \
        --ignore-hold \
        --assume-yes
fi

print "Creating SSL Certificate"

sudo certbot certonly \
    --agree-tos \
    --email development@cloudhybrid.io \
    --webroot \
    --webroot-path /var/www/html \
    --domains $1 \
        --non-interactive

sudo bash -c cat << EOF > /etc/nginx/sites-enabled/$1.conf
server {
    listen 443 http2 ssl;
    listen [::]:443 http2 ssl;
    server_name $1;

    root /var/www/html;

    index index.php index.html index.htm index.nginx-debian.html;

    ssl_certificate /etc/letsencrypt/live/$1/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$1/privkey.pem;

    client_max_body_size 0;

    underscores_in_headers  on;
    ignore_invalid_headers  off;
    ssi_silent_errors       on;
    server_tokens           off;

    server_name_in_redirect on;

    include ssl.conf;
    include security.conf;
    include proxy.conf;

    location / {
        http2_push_preload on;
        proxy_pass https://10.0.0.50;
    }
}

server {
    listen *:80;
    listen [::]:80;

    server_name $1;

    root /var/www/${_DIRECTORY};
    index index.html index.htm index.nginx-debian.html;

    location / {
        return 301 https://$1\$request_uri;
    }
}

EOF

sudo nginx -t && sudo nginx -s reload

exit 0