#!/usr/bin/env file .

# -*-  Coding: UTF-8  -*- #
# -*-  System: Linux  -*- #
# -*-  Usage:  *.Yaml -*- #

# Owner:    Jacob B. Sanders
# Source:   code.cloud-technology.io
# License:  BSD 3-Clause License

#
# Copyright 2020 Jacob B. Sanders - Cloud Hybrid LLC. & Affiliates
#
# Redistribution and use in source and binary forms, with or without modification, are permitted
# provided that the following conditions are met:
#
# 1.  Redistributions of source code must retain the above copyright notice, this list of
#     conditions and the following disclaimer.
#
# 2.  Redistributions in binary form must reproduce the above copyright notice, this list of
#     conditions and the following disclaimer in the documentation and/or other materials
#     provided with the distribution.
#
# 3.  Neither the name of the copyright holder nor the names of its contributors may be used
#     to endorse or promote products derived from this software without specific prior written
#     permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.
#

---

#
# ========================================================================
# --> Pipeline: Continuous Integration & Deployment Configuration(s)
# ========================================================================
# - https://gitlab.com/gitlab-org/ci-cd/codequality
#

# ------------------------------------------------------------------------
# Code Quality Anchors
# ------------------------------------------------------------------------

.Code-Quality: &Code-Quality-Runner [ "Cloud-Hybrid", "AWS", "Python", "Docker", "Alpine" ]

.Code-Quality: &Code-Quality-Stage "Analysis"

.Code-Quality: &Code-Quality-Failure-Allowance True

.Code-Quality: &Code-Quality-Service [ "docker:dind" ]

.Code-Quality: &Code-Quality-Image "docker:stable-dind"

.Code-Quality: &Code-Quality-Pre-Execution [ "" ]

.Code-Quality: &Code-Quality-Trigger
    -   if:     $CODE_QUALITY_DISABLED
        when:   "never"
    -   if:     $CI_PIPELINE_SOURCE == "merge_request_event" # Merge Request Pipelines
    -   if:     $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH      # Master Branch
    -   if:     $CI_COMMIT_TAG                               # Tags
        when:   "never"

.Code-Quality: &Code-Quality-Artifacts {
    reports:    { codequality: "gl-code-quality-report.json" },
}

.Code-Quality: &Code-Quality-Report-Artifacts
    reports:    { codequality: "gl-code-quality-report.json" }

.Code-Quality: &Code-Quality-Dependencies [ { job: "Initialization", artifacts: False } ]

.Code-Quality: &Code-Quality-Variables
    CQSTDOUT:           "Code-Quality.json"
    CQ:                 "gl-code-quality-report.json"
    DOCKER_DRIVER:      "overlay2"
    GIT_STRATEGY:       "clone"
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:latest"
    DOCKER_TLS_CERTDIR: ""
    ENGINE_MEMORY_LIMIT_BYTES: "4096000000"
    TIMEOUT_SECONDS:    "19999999980"
    SOURCECODE:         "${CI_PROJECT_DIR}"

.Code-Quality: &Code-Quality-Cache {}

.Code-Quality: &Code-Quality-Report
    - docker pull --quiet ${CODE_QUALITY_IMAGE}
    - docker run
        --env "SOURCE_CODE=${PWD}"
        --env "TIMEOUT_SECONDS=${TIMEOUT_SECONDS}"
        --env "ENGINE_MEMORY_LIMIT_BYTES=${ENGINE_MEMORY_LIMIT_BYTES}"
        --volume "${PWD}:/Code-Quality:rw"
        --volume "/var/run/docker.sock:/var/run/docker.sock"
            "${CODE_QUALITY_IMAGE}" /Code-Quality

# ------------------------------------------------------------------------
# Primary Entry-Point (Jobs + Stages + Triggers)
# ------------------------------------------------------------------------

Code-Quality:
    tags:           *Code-Quality-Runner
    image:          *Code-Quality-Image
    rules:          *Code-Quality-Trigger
    stage:          *Code-Quality-Stage
    needs:          *Code-Quality-Dependencies
    script:         *Code-Quality-Report
    services:       *Code-Quality-Service
    artifacts:      *Code-Quality-Artifacts
    variables:      *Code-Quality-Variables
    before_script:  *Code-Quality-Pre-Execution
    allow_failure:  *Code-Quality-Failure-Allowance
