AWSTemplateFormatVersion: "2010-09-09"
Description: >-
    Stack-Name: "GitLab-Default-CFN-Stack"
        - GitLab Installation Template
Metadata:
    Validation:     |
        aws cloudformation validate-template file://Stack.Yaml
    Generate-JSON:  |
        cloudformation get-template-summary --template-body "file://Stack.Yaml"
    Create:         |
        aws cloudformation create-stack \
            --stack-name "Code-Laboratory" \
                --template-body "file://Stack.Yaml" \
                --parameters "file://Parameters/Stack.json" \
                    --capabilities CAPABILITY_IAM
    Update:         |
        aws cloudformation create-stack \
            --stack-name "[Stack-Name]" \
                --template-body "file://Stack.Yaml" \
                --parameters "file://Parameters/Stack.json" \
                    --capabilities CAPABILITY_IAM
    Decommission:   |
        aws cloudformation delete-stack \
            --stack-name "[Stack-Name]"
    Wait:           |
        aws cloudformation wait stack-[create|update|delete]-complete \
            --stack-name "[Stack-Name]"
    Documentation:
        Gitlab-Ports: https://docs.gitlab.com/omnibus/package-information/defaults.html
        Gitlab-Install-Scripts: https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce
        Gitlab-Supported-Distributions: https://packagecloud.io/docs#os_distro_version
        Yum-Repositories: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-configuring_yum_and_yum_repositories
        Yum-Variables-($basearch): https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-Using_Yum_Variables
    Creator:    "Jacob B. Sanders"
    License:    "BSD 3-Clause License"
    Copyright:  "Public Domain"
    Date:       "2020-05-21"
    Updated:    "2021-05-23"

Parameters:
    EC2InstanceName:
        Type: "String"
        Description: "Name-Tag for EC2 Instance"
        Default: "GitLab-Default-VPS-Instance"
    EC2InstanceType:
        Type: "String"
        Description: "VPS Instance Type"
        Default: "t3.large"
    EC2VolumeName:
        Type: "String"
        Description: "EBS Name for EC2 Instance"
        Default: "GitLab-Default-EBS-Volume"
    EC2VolumeType:
        Type: "String"
        Description: "SSD/HDD Type for EC2 Instance's Storage"
        Default: "gp2"
    EC2VolumeSize:
        Type: "String"
        Description: "Storage Size (GB)"
        Default: "150"
    EC2VolumeOptimized:
        Type: "String"
        Description: "EBS Optimization for EC2 Instance"
        Default: "True"
    EC2InstanceAMIID:
        Type: "String"
        Description: "Operating System ID"
        Default: "ami-0d97ef13c06b05a19"
    EC2AccessKeyName:
        Type: "AWS::SSM::Parameter::Value<String>"
        Description: "(SSM) SSH Key-Pair Name"
        Default: "GitLab-Stack-Key-Name"
    EC2AccessKeyPrivate:
        Type: "AWS::SSM::Parameter::Value<String>"
        Description: "(SSM) SSH Private-Key Parameter Name"
        Default: "GitLab-Stack-Key-Private"
        NoEcho: True
    EC2AccessKeyPublic:
        Type: "AWS::SSM::Parameter::Value<String>"
        Description: "(SSM) SSH Public-Key Parameter Name"
        Default: "GitLab-Stack-Key-Private"
    EC2VPCID:
        Type: "String"
        Description: "(SSM) VPC ID"
        Default: "vpc-a2fe3dc9"
    DNSHostedZoneName:
        Type: "String"
        Default: "development.cloud-technology.io."
    DNSHostedZoneRecord:
        Type: "String"
        Default: "development.cloud-technology.io"
    DNSHostedZoneRecordType:
        Type: "String"
        Default: "A"

Resources:
    # === EC2 Instance === #
    EC2Instance:
        Type: "AWS::EC2::Instance"
        Metadata:
            "AWS::CloudFormation::Init":
                configSets:
                    System:
                        - "Initialization"
                        - "Configuration"
                "Initialization":
                    files:
                        "/Cloud-Technology.Bash":
                            mode: "000600"
                            owner: "root"
                            group: "root"
                            content: |
                                #!/bin/bash

                                Install () {
                                    dnf install -y curl             \
                                        policycoreutils             \
                                        policycoreutils-python      \
                                        openssh-server              \
                                        perl                        \
                                        firewalld                   \
                                            --quiet                 \
                                            --skip-broken           \
                                            --assumeyes

                                    # dnf install postfix         \
                                    #     --quiet                 \
                                    #     --skip-broken           \
                                    #     --assumeyes

                                    # systemctl enable sshd
                                    # systemctl start sshd
                                }

                                Firewall () {
                                    sudo systemctl enable firewalld
                                    sudo systemctl start firewalld
                                    sudo systemctl reload firewalld

                                    sudo firewall-cmd --permanent --add-interface eth0

                                    sudo firewall-cmd --zone=public --permanent --add-port=22/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=80/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=443/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=5000/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=5000/udp
                                    sudo firewall-cmd --zone=public --permanent --add-port=5986/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=5432/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=8060/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=143/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=514/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=9100/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=9090/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=8093/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=4445/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=2376/tcp
                                    sudo firewall-cmd --zone=public --permanent --add-port=2375/tcp

                                    sudo firewall-cmd --set-default-zone=public

                                    sudo firewall-cmd --reload

                                    sudo systemctl enable firewalld
                                    sudo systemctl start firewalld
                                    sudo systemctl reload firewalld
                                }

                                Cockpit () {
                                    systemctl stop cockpit
                                    rpm -e cockpit-system
                                    rpm -e cockpit-bridge
                                    rpm -e cockpit-ws
                                    rm -R -f /run/cockpit
                                    rm -R -f /etc/cockpit
                                    rm -R -f /usr/share/cockpit
                                    rm -R -f /var/lib/selinux/targeted/active/modules/100/cockpit
                                    rm -R -f /usr/share/selinux/targeted/default/active/modules/100/cockpit
                                }

                                Main () {
                                    Install || true
                                    Firewall || trie
                                    Cockpit || true
                                }; Main || true

                        "/Gitlab-Setup.Bash":
                            mode: "000600"
                            owner: "root"
                            group: "root"
                            content: |
                                #!/bin/bash

                                # -*-  Coding: UTF-8  -*- #
                                # -*-  System: Linux  -*- #
                                # -*-  Usage:   *.*   -*- #

                                curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash

                        "/Gitlab-Install.Bash":
                            mode: "000600"
                            owner: "root"
                            group: "root"
                            content: |
                                #!/bin/bash

                                # -*-  Coding: UTF-8  -*- #
                                # -*-  System: Linux  -*- #
                                # -*-  Usage:   *.*   -*- #

                                sudo export EXTERNAL_URL="http://development.cloud-technology.io" dnf install -y gitlab-ee

                        "/etc/cfn/cfn-hup.conf":
                            mode: "000400"
                            owner: "root"
                            group: "root"
                            content: !Sub |
                                [main]
                                stack = ${AWS::StackId}
                                region = ${AWS::Region}
                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            mode: "000400"
                            owner: "root"
                            group: "root"
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v \
                                    --stack ${AWS::StackName}   \
                                    --resource EC2Instance      \
                                    --configsets System         \
                                    --region ${AWS::Region}
                "Configuration":
                    commands:
                        "Cloud":
                            command: |
                                sudo chmod a+x /Cloud-Technology.Bash || true
                                sudo chmod a+x /Gitlab-Setup.Bash || true
                                sudo chmod a+x /Gitlab-Install.Bash || true

                                sudo /Cloud-Technology.Bash || true
                                sudo /Gitlab-Setup.Bash || true
                                sudo /Gitlab-Install.Bash || true
        Properties:
            DisableApiTermination: False
            EbsOptimized: !Ref EC2VolumeOptimized
            InstanceInitiatedShutdownBehavior: "stop"
            InstanceType: !Ref EC2InstanceType
            KeyName: !Ref EC2AccessKeyName
            Monitoring: True
            SourceDestCheck: False
            ImageId: !Ref EC2InstanceAMIID
            SecurityGroupIds:
                - !Ref EC2SecurityGroup
            BlockDeviceMappings:
                -
                    DeviceName: "/dev/sda1"
                    Ebs:
                        VolumeSize: !Ref EC2VolumeSize
            Tags:
                -
                    Key: Name
                    Value: !Ref EC2InstanceName
                -
                    Key: Stack
                    Value: !Sub "${AWS::StackName}"
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -x

                    dnf -y update || true
                    dnf -y install python2 || true
                    alternatives --set python /usr/bin/python2 || true

                    curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz || true
                    tar xvf aws-cfn-bootstrap-latest.tar.gz || true

                    cd aws-cfn-bootstrap-*/
                    python setup.py build || true
                    python setup.py install || true

                    mkdir -p /opt/aws/bin || true
                    ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup || true
                    chmod 775 /usr/init/redhat/cfn-hup || true

                    ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup || true
                    ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init || true
                    ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal || true

                    ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata || true
                    ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event || true
                    ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result || true

                    /opt/aws/bin/cfn-init -v        \
                        --stack "${AWS::StackName}" \
                        --resource  EC2Instance     \
                        --configsets System         \
                        --region ${AWS::Region} || true

                    /opt/aws/bin/cfn-signal -e $?    \
                        --stack "${AWS::StackName}" \
                        --resource  EC2Instance     \
                        --region ${AWS::Region} || true

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            VpcId: !Ref EC2VPCID
            GroupDescription: !Sub "EC2 Egress & Ingress [${AWS::StackName}]"
            SecurityGroupIngress:
                -
                    IpProtocol: "tcp"
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: "0.0.0.0/0"
                -
                    IpProtocol: "udp"
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: "0.0.0.0/0"
                -
                    IpProtocol: "tcp"
                    FromPort: 0
                    ToPort: 65535
                    CidrIpv6: "::/0"
                -
                    IpProtocol: "udp"
                    FromPort: 0
                    ToPort: 65535
                    CidrIpv6: "::/0"
            SecurityGroupEgress:
                -
                    IpProtocol: "tcp"
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: "0.0.0.0/0"
                -
                    IpProtocol: "udp"
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: "0.0.0.0/0"
                -
                    IpProtocol: "tcp"
                    FromPort: 0
                    ToPort: 65535
                    CidrIpv6: "::/0"
                -
                    IpProtocol: "udp"
                    FromPort: 0
                    ToPort: 65535
                    CidrIpv6: "::/0"
            Tags:
                -
                    Key: Name
                    Value: !Ref EC2InstanceName
                -
                    Key: Stack
                    Value: !Sub "${AWS::StackName}"

    ElasticIPAddress:
        Type: "AWS::EC2::EIP"
        Properties:
            InstanceId: !Ref EC2Instance
            Tags:
                -
                    Key: Name
                    Value: !Ref EC2InstanceName
                -
                    Key: Stack
                    Value: !Sub "${AWS::StackName}"

    EIPAInstanceAssociate:
        Type: AWS::EC2::EIPAssociation
        Properties:
            EIP: !Ref ElasticIPAddress
            InstanceId: !Ref EC2Instance

    EC2InstanceRecordSet:
        Type: AWS::Route53::RecordSet
        Properties:
            Comment: "Automated Record-Set"
            HostedZoneName: !Ref DNSHostedZoneName
            Name:
                Ref: DNSHostedZoneRecord
            TTL: "60"
            Type: !Ref DNSHostedZoneRecordType
            ResourceRecords:
                - !Ref ElasticIPAddress

#    SSLCertificate:
#        Type: AWS::CertificateManager::Certificate
#        Properties:
#            DomainName: !Ref DNSHostedZoneRecord
#            DomainValidationOptions:
#                -   DomainName: !Ref DNSHostedZoneRecord
#                    ValidationDomain: !Ref DNSHostedZoneRecord

# === Return Value(s) === #
Outputs:
    Stack:
        Description: "The ID of the EC2 Instance"
        Value: !Ref EC2Instance
        Export:
            Name: !Sub "${AWS::StackName}"
